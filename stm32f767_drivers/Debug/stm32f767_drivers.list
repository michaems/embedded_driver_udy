
stm32f767_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000734  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800092c  0800092c  0001092c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800093c  0800093c  00010944  2**0
                  CONTENTS
  4 .ARM          00000000  0800093c  0800093c  00010944  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800093c  08000944  00010944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800093c  0800093c  0001093c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000940  08000940  00010940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000944  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000944  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010944  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001413  00000000  00000000  0001096e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003c4  00000000  00000000  00011d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000168  00000000  00000000  00012148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000130  00000000  00000000  000122b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002344  00000000  00000000  000123e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000122b  00000000  00000000  00014724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009677  00000000  00000000  0001594f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  0001efc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000510  00000000  00000000  0001f010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000914 	.word	0x08000914

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000914 	.word	0x08000914

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <main>:
void SPI2_Inits(void);



int main(void)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0

    char user_data[] = "Hello World!";
 800024e:	4b10      	ldr	r3, [pc, #64]	; (8000290 <main+0x48>)
 8000250:	463c      	mov	r4, r7
 8000252:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000254:	c407      	stmia	r4!, {r0, r1, r2}
 8000256:	7023      	strb	r3, [r4, #0]

    SPI2_GPIOInits();
 8000258:	f000 f83a 	bl	80002d0 <SPI2_GPIOInits>

    /*Enable SPI2*/

    SPI2_Inits();
 800025c:	f000 f81c 	bl	8000298 <SPI2_Inits>

    SPI_SSIConfig(SPI2, ENABLE);
 8000260:	2101      	movs	r1, #1
 8000262:	480c      	ldr	r0, [pc, #48]	; (8000294 <main+0x4c>)
 8000264:	f000 f953 	bl	800050e <SPI_SSIConfig>

    SPI_PeripheralControl(SPI2, ENABLE);
 8000268:	2101      	movs	r1, #1
 800026a:	480a      	ldr	r0, [pc, #40]	; (8000294 <main+0x4c>)
 800026c:	f000 f934 	bl	80004d8 <SPI_PeripheralControl>
    SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 8000270:	463b      	mov	r3, r7
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ffe0 	bl	8000238 <strlen>
 8000278:	4602      	mov	r2, r0
 800027a:	463b      	mov	r3, r7
 800027c:	4619      	mov	r1, r3
 800027e:	4805      	ldr	r0, [pc, #20]	; (8000294 <main+0x4c>)
 8000280:	f000 f908 	bl	8000494 <SPI_SendData>

    SPI_PeripheralControl(SPI2, DISABLE);
 8000284:	2100      	movs	r1, #0
 8000286:	4803      	ldr	r0, [pc, #12]	; (8000294 <main+0x4c>)
 8000288:	f000 f926 	bl	80004d8 <SPI_PeripheralControl>

    while(1);
 800028c:	e7fe      	b.n	800028c <main+0x44>
 800028e:	bf00      	nop
 8000290:	0800092c 	.word	0x0800092c
 8000294:	40003800 	.word	0x40003800

08000298 <SPI2_Inits>:
    return 0;
}


void SPI2_Inits(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
    SPI_Handle_t SPI2_Handle;

    SPI2_Handle.pSPIx = SPI2;
 800029e:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <SPI2_Inits+0x34>)
 80002a0:	603b      	str	r3, [r7, #0]
    SPI2_Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80002a2:	2301      	movs	r3, #1
 80002a4:	717b      	strb	r3, [r7, #5]
    SPI2_Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002a6:	2301      	movs	r3, #1
 80002a8:	713b      	strb	r3, [r7, #4]
    SPI2_Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV_2; //8MHz
 80002aa:	2300      	movs	r3, #0
 80002ac:	71bb      	strb	r3, [r7, #6]
    SPI2_Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002ae:	2300      	movs	r3, #0
 80002b0:	71fb      	strb	r3, [r7, #7]
    SPI2_Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002b2:	2300      	movs	r3, #0
 80002b4:	723b      	strb	r3, [r7, #8]
    SPI2_Handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 80002b6:	2301      	movs	r3, #1
 80002b8:	727b      	strb	r3, [r7, #9]

    SPI_Init(&SPI2_Handle);
 80002ba:	463b      	mov	r3, r7
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f85e 	bl	800037e <SPI_Init>
}
 80002c2:	bf00      	nop
 80002c4:	3720      	adds	r7, #32
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40003800 	.word	0x40003800

080002d0 <SPI2_GPIOInits>:

void SPI2_GPIOInits(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
    GPIO_Handle_t SPI_Pins;

    SPI_Pins.pGPIOx = GPIOB;
 80002d6:	4b14      	ldr	r3, [pc, #80]	; (8000328 <SPI2_GPIOInits+0x58>)
 80002d8:	607b      	str	r3, [r7, #4]

    SPI_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002da:	2302      	movs	r3, #2
 80002dc:	727b      	strb	r3, [r7, #9]
    SPI_Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002de:	2305      	movs	r3, #5
 80002e0:	737b      	strb	r3, [r7, #13]
    SPI_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002e2:	2300      	movs	r3, #0
 80002e4:	733b      	strb	r3, [r7, #12]
    SPI_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002e6:	2300      	movs	r3, #0
 80002e8:	72fb      	strb	r3, [r7, #11]
    SPI_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ea:	2302      	movs	r3, #2
 80002ec:	72bb      	strb	r3, [r7, #10]
    //SCLK
    SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ee:	230d      	movs	r3, #13
 80002f0:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPI_Pins);
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 f925 	bl	8000544 <GPIO_Init>

    //MOSI
    SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002fa:	230f      	movs	r3, #15
 80002fc:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPI_Pins);
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f91f 	bl	8000544 <GPIO_Init>

    //MISO
    SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000306:	230e      	movs	r3, #14
 8000308:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPI_Pins);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f000 f919 	bl	8000544 <GPIO_Init>

    //NSS
    SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000312:	230c      	movs	r3, #12
 8000314:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPI_Pins);
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	4618      	mov	r0, r3
 800031a:	f000 f913 	bl	8000544 <GPIO_Init>
}
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40020400 	.word	0x40020400

0800032c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000330:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490d      	ldr	r1, [pc, #52]	; (800036c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035a:	f000 fab7 	bl	80008cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff ff73 	bl	8000248 <main>

08000362 <LoopForever>:

LoopForever:
    b LoopForever
 8000362:	e7fe      	b.n	8000362 <LoopForever>
  ldr   r0, =_estack
 8000364:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000370:	08000944 	.word	0x08000944
  ldr r2, =_sbss
 8000374:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000378:	2000001c 	.word	0x2000001c

0800037c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC_IRQHandler>

0800037e <SPI_Init>:
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_overrun_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	b084      	sub	sp, #16
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
    SPI_PeriClkCtrl(pSPIHandle->pSPIx, ENABLE);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	2101      	movs	r1, #1
 800038c:	4618      	mov	r0, r3
 800038e:	f000 f84b 	bl	8000428 <SPI_PeriClkCtrl>

    //CR1 register
    uint32_t temp_reg = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]

    //1. configure device mode
    temp_reg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR_BIT;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	791b      	ldrb	r3, [r3, #4]
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	461a      	mov	r2, r3
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	60fb      	str	r3, [r7, #12]

    //2. Bus config
    if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	795b      	ldrb	r3, [r3, #5]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d104      	bne.n	80003b6 <SPI_Init+0x38>
    {
        //bidi mode should be cleared
        temp_reg &= ~(1 << SPI_CR1_BIDIMODE_BIT);
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	e014      	b.n	80003e0 <SPI_Init+0x62>

    }
    else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	795b      	ldrb	r3, [r3, #5]
 80003ba:	2b02      	cmp	r3, #2
 80003bc:	d104      	bne.n	80003c8 <SPI_Init+0x4a>
    {
        //bidi mode should be set
        temp_reg |= (1 << SPI_CR1_BIDIMODE_BIT);
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	e00b      	b.n	80003e0 <SPI_Init+0x62>
    }
    else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX_ONLY)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	795b      	ldrb	r3, [r3, #5]
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	d107      	bne.n	80003e0 <SPI_Init+0x62>
    {
        //bidi mode should be cleared and RXONLY bit must be set
        temp_reg &= ~(1 << SPI_CR1_BIDIMODE_BIT);
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003d6:	60fb      	str	r3, [r7, #12]
        temp_reg |= (1 << SPI_CR1_RXONLY_BIT);
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003de:	60fb      	str	r3, [r7, #12]
    }

    //3. SPI Serial Clock speed
    temp_reg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BAUD_RATE_CTRL_BIT;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	799b      	ldrb	r3, [r3, #6]
 80003e4:	00db      	lsls	r3, r3, #3
 80003e6:	461a      	mov	r2, r3
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	60fb      	str	r3, [r7, #12]

    //5. Configure the CPOL
    temp_reg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL_BIT;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	79db      	ldrb	r3, [r3, #7]
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	461a      	mov	r2, r3
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	60fb      	str	r3, [r7, #12]

    //6. Configure the CPHA
    temp_reg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA_BIT;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	7a1b      	ldrb	r3, [r3, #8]
 8000400:	461a      	mov	r2, r3
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	4313      	orrs	r3, r2
 8000406:	60fb      	str	r3, [r7, #12]

    //7. Config SSM
    temp_reg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM_BIT;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	7a5b      	ldrb	r3, [r3, #9]
 800040c:	025b      	lsls	r3, r3, #9
 800040e:	461a      	mov	r2, r3
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	4313      	orrs	r3, r2
 8000414:	60fb      	str	r3, [r7, #12]

    //8. Save to CR1
    pSPIHandle->pSPIx->CR1 = temp_reg;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	68fa      	ldr	r2, [r7, #12]
 800041c:	601a      	str	r2, [r3, #0]
}
 800041e:	bf00      	nop
 8000420:	3710      	adds	r7, #16
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <SPI_PeriClkCtrl>:
{

}

void SPI_PeriClkCtrl(SPI_RegDef_t  *pSPIx, uint8_t EnOrDi)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi)
 8000434:	78fb      	ldrb	r3, [r7, #3]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d01f      	beq.n	800047a <SPI_PeriClkCtrl+0x52>
    {
        if (pSPIx == SPI1)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SPI_PeriClkCtrl+0x5c>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <SPI_PeriClkCtrl+0x28>
        {
            SPI1_PCLK_EN();
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <SPI_PeriClkCtrl+0x60>)
 8000444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000446:	4a10      	ldr	r2, [pc, #64]	; (8000488 <SPI_PeriClkCtrl+0x60>)
 8000448:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800044c:	6453      	str	r3, [r2, #68]	; 0x44
    }
    else
    {
        //do this later
    }
}
 800044e:	e014      	b.n	800047a <SPI_PeriClkCtrl+0x52>
        else if (pSPIx == SPI2)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <SPI_PeriClkCtrl+0x64>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <SPI_PeriClkCtrl+0x3e>
            SPI2_PCLK_EN();
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <SPI_PeriClkCtrl+0x60>)
 800045a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800045c:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <SPI_PeriClkCtrl+0x60>)
 800045e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000462:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000464:	e009      	b.n	800047a <SPI_PeriClkCtrl+0x52>
        else if(pSPIx == SPI3)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a09      	ldr	r2, [pc, #36]	; (8000490 <SPI_PeriClkCtrl+0x68>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d105      	bne.n	800047a <SPI_PeriClkCtrl+0x52>
            SPI3_PCLK_EN();
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <SPI_PeriClkCtrl+0x60>)
 8000470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000472:	4a05      	ldr	r2, [pc, #20]	; (8000488 <SPI_PeriClkCtrl+0x60>)
 8000474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000478:	6413      	str	r3, [r2, #64]	; 0x40
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40013000 	.word	0x40013000
 8000488:	40023800 	.word	0x40023800
 800048c:	40003800 	.word	0x40003800
 8000490:	40003c00 	.word	0x40003c00

08000494 <SPI_SendData>:


/*Data send and receive*/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t len)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
    /*this is blocking call*/
    while (len > 0)
 80004a0:	e011      	b.n	80004c6 <SPI_SendData+0x32>
    {
        //1. Wait until TXE is set
        while((pSPIx->SR & (1 << 1)) == 0);
 80004a2:	bf00      	nop
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	f003 0302 	and.w	r3, r3, #2
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0f9      	beq.n	80004a4 <SPI_SendData+0x10>

        //2. Check the format (16 bit will be done later. pSpix->DR = *((uint16_t *)pTxBuffer); len--; len--;
        pSPIx->DR = *pTxBuffer;
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	60da      	str	r2, [r3, #12]
        len--;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	3b01      	subs	r3, #1
 80004be:	607b      	str	r3, [r7, #4]
        pTxBuffer++;
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	3301      	adds	r3, #1
 80004c4:	60bb      	str	r3, [r7, #8]
    while (len > 0)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d1ea      	bne.n	80004a2 <SPI_SendData+0xe>
    }
}
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d106      	bne.n	80004f8 <SPI_PeripheralControl+0x20>
    {
        pSPIx->CR1 |= (1 << SPI_CR1_SPE_BIT);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE_BIT);
    }
}
 80004f6:	e005      	b.n	8000504 <SPI_PeripheralControl+0x2c>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SPE_BIT);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr

0800050e <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	460b      	mov	r3, r1
 8000518:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 800051a:	78fb      	ldrb	r3, [r7, #3]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d106      	bne.n	800052e <SPI_SSIConfig+0x20>
    {
        pSPIx->CR1 |= (1 << SPI_CR1_SSI_BIT);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        pSPIx->CR1 &= ~(1 << SPI_CR1_SSI_BIT);
    }
}
 800052c:	e005      	b.n	800053a <SPI_SSIConfig+0x2c>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SSI_BIT);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	601a      	str	r2, [r3, #0]
}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <GPIO_Init>:
#include <stm32f767xx_gpio_driver.h>
#include <sys/_stdint.h>

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    /*Enable the clock*/
    GPIO_PeriClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2101      	movs	r1, #1
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f976 	bl	8000844 <GPIO_PeriClkCtrl>

    uint32_t tmp = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
    //1. configure the mode
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANLG)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	795b      	ldrb	r3, [r3, #5]
 8000560:	2b03      	cmp	r3, #3
 8000562:	d81f      	bhi.n	80005a4 <GPIO_Init+0x60>
    {
        tmp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	795b      	ldrb	r3, [r3, #5]
 8000568:	461a      	mov	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	fa02 f303 	lsl.w	r3, r2, r3
 8000574:	617b      	str	r3, [r7, #20]
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	791b      	ldrb	r3, [r3, #4]
 8000580:	4619      	mov	r1, r3
 8000582:	2303      	movs	r3, #3
 8000584:	408b      	lsls	r3, r1
 8000586:	43db      	mvns	r3, r3
 8000588:	4619      	mov	r1, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	400a      	ands	r2, r1
 8000590:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= tmp;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	6819      	ldr	r1, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	697a      	ldr	r2, [r7, #20]
 800059e:	430a      	orrs	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	e0a1      	b.n	80006e8 <GPIO_Init+0x1a4>
    }
    else
    {
        if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d117      	bne.n	80005dc <GPIO_Init+0x98>
        {
            //1. Configure the FTSR (falling trigger selection register)
            EXTI->FTSR |= (1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ac:	4b9c      	ldr	r3, [pc, #624]	; (8000820 <GPIO_Init+0x2dc>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7912      	ldrb	r2, [r2, #4]
 80005b4:	4611      	mov	r1, r2
 80005b6:	2201      	movs	r2, #1
 80005b8:	408a      	lsls	r2, r1
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a98      	ldr	r2, [pc, #608]	; (8000820 <GPIO_Init+0x2dc>)
 80005be:	430b      	orrs	r3, r1
 80005c0:	60d3      	str	r3, [r2, #12]
            //clear the corresponding RTSR bit
            EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c2:	4b97      	ldr	r3, [pc, #604]	; (8000820 <GPIO_Init+0x2dc>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	7912      	ldrb	r2, [r2, #4]
 80005ca:	4611      	mov	r1, r2
 80005cc:	2201      	movs	r2, #1
 80005ce:	408a      	lsls	r2, r1
 80005d0:	43d2      	mvns	r2, r2
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a92      	ldr	r2, [pc, #584]	; (8000820 <GPIO_Init+0x2dc>)
 80005d6:	400b      	ands	r3, r1
 80005d8:	6093      	str	r3, [r2, #8]
 80005da:	e035      	b.n	8000648 <GPIO_Init+0x104>

        }
        else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	795b      	ldrb	r3, [r3, #5]
 80005e0:	2b05      	cmp	r3, #5
 80005e2:	d117      	bne.n	8000614 <GPIO_Init+0xd0>
        {
            //1. Configure RTSR
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e4:	4b8e      	ldr	r3, [pc, #568]	; (8000820 <GPIO_Init+0x2dc>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	7912      	ldrb	r2, [r2, #4]
 80005ec:	4611      	mov	r1, r2
 80005ee:	2201      	movs	r2, #1
 80005f0:	408a      	lsls	r2, r1
 80005f2:	4611      	mov	r1, r2
 80005f4:	4a8a      	ldr	r2, [pc, #552]	; (8000820 <GPIO_Init+0x2dc>)
 80005f6:	430b      	orrs	r3, r1
 80005f8:	6093      	str	r3, [r2, #8]
            //clear the corresponding FTSR bit
            EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fa:	4b89      	ldr	r3, [pc, #548]	; (8000820 <GPIO_Init+0x2dc>)
 80005fc:	68db      	ldr	r3, [r3, #12]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	7912      	ldrb	r2, [r2, #4]
 8000602:	4611      	mov	r1, r2
 8000604:	2201      	movs	r2, #1
 8000606:	408a      	lsls	r2, r1
 8000608:	43d2      	mvns	r2, r2
 800060a:	4611      	mov	r1, r2
 800060c:	4a84      	ldr	r2, [pc, #528]	; (8000820 <GPIO_Init+0x2dc>)
 800060e:	400b      	ands	r3, r1
 8000610:	60d3      	str	r3, [r2, #12]
 8000612:	e019      	b.n	8000648 <GPIO_Init+0x104>
        }
        else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	795b      	ldrb	r3, [r3, #5]
 8000618:	2b06      	cmp	r3, #6
 800061a:	d115      	bne.n	8000648 <GPIO_Init+0x104>
        {
            //1. Configure both FTSR and RTSR
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061c:	4b80      	ldr	r3, [pc, #512]	; (8000820 <GPIO_Init+0x2dc>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	7912      	ldrb	r2, [r2, #4]
 8000624:	4611      	mov	r1, r2
 8000626:	2201      	movs	r2, #1
 8000628:	408a      	lsls	r2, r1
 800062a:	4611      	mov	r1, r2
 800062c:	4a7c      	ldr	r2, [pc, #496]	; (8000820 <GPIO_Init+0x2dc>)
 800062e:	430b      	orrs	r3, r1
 8000630:	60d3      	str	r3, [r2, #12]
            //set the corresponding RTSR bit
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000632:	4b7b      	ldr	r3, [pc, #492]	; (8000820 <GPIO_Init+0x2dc>)
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	7912      	ldrb	r2, [r2, #4]
 800063a:	4611      	mov	r1, r2
 800063c:	2201      	movs	r2, #1
 800063e:	408a      	lsls	r2, r1
 8000640:	4611      	mov	r1, r2
 8000642:	4a77      	ldr	r2, [pc, #476]	; (8000820 <GPIO_Init+0x2dc>)
 8000644:	430b      	orrs	r3, r1
 8000646:	6093      	str	r3, [r2, #8]
        }

        //2. Configure the GPIO port selection in SYSCFG_EXTICR
        uint8_t tmp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	089b      	lsrs	r3, r3, #2
 800064e:	74fb      	strb	r3, [r7, #19]
        uint8_t tmp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	f003 0303 	and.w	r3, r3, #3
 8000658:	74bb      	strb	r3, [r7, #18]
        uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a71      	ldr	r2, [pc, #452]	; (8000824 <GPIO_Init+0x2e0>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d024      	beq.n	80006ae <GPIO_Init+0x16a>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a6f      	ldr	r2, [pc, #444]	; (8000828 <GPIO_Init+0x2e4>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d01d      	beq.n	80006aa <GPIO_Init+0x166>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a6e      	ldr	r2, [pc, #440]	; (800082c <GPIO_Init+0x2e8>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d016      	beq.n	80006a6 <GPIO_Init+0x162>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a6c      	ldr	r2, [pc, #432]	; (8000830 <GPIO_Init+0x2ec>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d00f      	beq.n	80006a2 <GPIO_Init+0x15e>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a6b      	ldr	r2, [pc, #428]	; (8000834 <GPIO_Init+0x2f0>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d008      	beq.n	800069e <GPIO_Init+0x15a>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a69      	ldr	r2, [pc, #420]	; (8000838 <GPIO_Init+0x2f4>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d101      	bne.n	800069a <GPIO_Init+0x156>
 8000696:	2305      	movs	r3, #5
 8000698:	e00a      	b.n	80006b0 <GPIO_Init+0x16c>
 800069a:	2300      	movs	r3, #0
 800069c:	e008      	b.n	80006b0 <GPIO_Init+0x16c>
 800069e:	2304      	movs	r3, #4
 80006a0:	e006      	b.n	80006b0 <GPIO_Init+0x16c>
 80006a2:	2303      	movs	r3, #3
 80006a4:	e004      	b.n	80006b0 <GPIO_Init+0x16c>
 80006a6:	2302      	movs	r3, #2
 80006a8:	e002      	b.n	80006b0 <GPIO_Init+0x16c>
 80006aa:	2301      	movs	r3, #1
 80006ac:	e000      	b.n	80006b0 <GPIO_Init+0x16c>
 80006ae:	2300      	movs	r3, #0
 80006b0:	747b      	strb	r3, [r7, #17]
        SYSCFG_PCLK_EN();
 80006b2:	4b62      	ldr	r3, [pc, #392]	; (800083c <GPIO_Init+0x2f8>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a61      	ldr	r2, [pc, #388]	; (800083c <GPIO_Init+0x2f8>)
 80006b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
        SYSCFG->EXTICR[tmp1] = portcode << (tmp2 * 4);
 80006be:	7c7a      	ldrb	r2, [r7, #17]
 80006c0:	7cbb      	ldrb	r3, [r7, #18]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	fa02 f103 	lsl.w	r1, r2, r3
 80006c8:	4a5d      	ldr	r2, [pc, #372]	; (8000840 <GPIO_Init+0x2fc>)
 80006ca:	7cfb      	ldrb	r3, [r7, #19]
 80006cc:	3302      	adds	r3, #2
 80006ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

        //3. Enable the exti interrupt delivery using IMR
        EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d2:	4b53      	ldr	r3, [pc, #332]	; (8000820 <GPIO_Init+0x2dc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	7912      	ldrb	r2, [r2, #4]
 80006da:	4611      	mov	r1, r2
 80006dc:	2201      	movs	r2, #1
 80006de:	408a      	lsls	r2, r1
 80006e0:	4611      	mov	r1, r2
 80006e2:	4a4f      	ldr	r2, [pc, #316]	; (8000820 <GPIO_Init+0x2dc>)
 80006e4:	430b      	orrs	r3, r1
 80006e6:	6013      	str	r3, [r2, #0]
    }

    //2. config. the speed
    tmp = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
    tmp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	799b      	ldrb	r3, [r3, #6]
 80006f0:	461a      	mov	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	689a      	ldr	r2, [r3, #8]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	4619      	mov	r1, r3
 800070a:	2303      	movs	r3, #3
 800070c:	408b      	lsls	r3, r1
 800070e:	43db      	mvns	r3, r3
 8000710:	4619      	mov	r1, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	400a      	ands	r2, r1
 8000718:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= tmp;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6899      	ldr	r1, [r3, #8]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	430a      	orrs	r2, r1
 8000728:	609a      	str	r2, [r3, #8]

    //3. config the pupd settings
    tmp = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
    tmp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	79db      	ldrb	r3, [r3, #7]
 8000732:	461a      	mov	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	791b      	ldrb	r3, [r3, #4]
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	68da      	ldr	r2, [r3, #12]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	4619      	mov	r1, r3
 800074c:	2303      	movs	r3, #3
 800074e:	408b      	lsls	r3, r1
 8000750:	43db      	mvns	r3, r3
 8000752:	4619      	mov	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	400a      	ands	r2, r1
 800075a:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= tmp;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	68d9      	ldr	r1, [r3, #12]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	697a      	ldr	r2, [r7, #20]
 8000768:	430a      	orrs	r2, r1
 800076a:	60da      	str	r2, [r3, #12]

    //4. config. the optype
    tmp = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
    tmp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7a1b      	ldrb	r3, [r3, #8]
 8000774:	461a      	mov	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	685a      	ldr	r2, [r3, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	791b      	ldrb	r3, [r3, #4]
 800078a:	4619      	mov	r1, r3
 800078c:	2301      	movs	r3, #1
 800078e:	408b      	lsls	r3, r1
 8000790:	43db      	mvns	r3, r3
 8000792:	4619      	mov	r1, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	400a      	ands	r2, r1
 800079a:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= tmp;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6859      	ldr	r1, [r3, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	697a      	ldr	r2, [r7, #20]
 80007a8:	430a      	orrs	r2, r1
 80007aa:	605a      	str	r2, [r3, #4]

    //5. config the alt. functionallity
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	795b      	ldrb	r3, [r3, #5]
 80007b0:	2b02      	cmp	r3, #2
 80007b2:	d131      	bne.n	8000818 <GPIO_Init+0x2d4>
    {
        uint8_t tmp_1, tmp_2;
        tmp_1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	08db      	lsrs	r3, r3, #3
 80007ba:	743b      	strb	r3, [r7, #16]
        tmp_2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	f003 0307 	and.w	r3, r3, #7
 80007c4:	73fb      	strb	r3, [r7, #15]

        pGPIOHandle->pGPIOx->AFR[tmp_1] &= ~(0xF << (4*tmp_2));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	7c3a      	ldrb	r2, [r7, #16]
 80007cc:	3208      	adds	r2, #8
 80007ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	220f      	movs	r2, #15
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	43db      	mvns	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	7c3a      	ldrb	r2, [r7, #16]
 80007e6:	4001      	ands	r1, r0
 80007e8:	3208      	adds	r2, #8
 80007ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[tmp_1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*tmp_2));
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	7c3a      	ldrb	r2, [r7, #16]
 80007f4:	3208      	adds	r2, #8
 80007f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7a5b      	ldrb	r3, [r3, #9]
 80007fe:	461a      	mov	r2, r3
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	4618      	mov	r0, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	7c3a      	ldrb	r2, [r7, #16]
 8000810:	4301      	orrs	r1, r0
 8000812:	3208      	adds	r2, #8
 8000814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40013c00 	.word	0x40013c00
 8000824:	40020000 	.word	0x40020000
 8000828:	40020400 	.word	0x40020400
 800082c:	40020800 	.word	0x40020800
 8000830:	40020c00 	.word	0x40020c00
 8000834:	40021000 	.word	0x40021000
 8000838:	40021400 	.word	0x40021400
 800083c:	40023800 	.word	0x40023800
 8000840:	40013800 	.word	0x40013800

08000844 <GPIO_PeriClkCtrl>:
    }

}

void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
    if (EnOrDi == ENABLE)
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d12a      	bne.n	80008ac <GPIO_PeriClkCtrl+0x68>
    {
        if (pGPIOx == GPIOA)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <GPIO_PeriClkCtrl+0x74>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d106      	bne.n	800086c <GPIO_PeriClkCtrl+0x28>
        {
            GPIOA_PCLK_EN();
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <GPIO_PeriClkCtrl+0x78>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a16      	ldr	r2, [pc, #88]	; (80008bc <GPIO_PeriClkCtrl+0x78>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
    }
    else
    {

    }
}
 800086a:	e01f      	b.n	80008ac <GPIO_PeriClkCtrl+0x68>
        else if (pGPIOx == GPIOB)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <GPIO_PeriClkCtrl+0x7c>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d106      	bne.n	8000882 <GPIO_PeriClkCtrl+0x3e>
            GPIOB_PCLK_EN();
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <GPIO_PeriClkCtrl+0x78>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	4a10      	ldr	r2, [pc, #64]	; (80008bc <GPIO_PeriClkCtrl+0x78>)
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000880:	e014      	b.n	80008ac <GPIO_PeriClkCtrl+0x68>
        else if (pGPIOx == GPIOC)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <GPIO_PeriClkCtrl+0x80>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d106      	bne.n	8000898 <GPIO_PeriClkCtrl+0x54>
            GPIOC_PCLK_EN();
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <GPIO_PeriClkCtrl+0x78>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <GPIO_PeriClkCtrl+0x78>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000896:	e009      	b.n	80008ac <GPIO_PeriClkCtrl+0x68>
        else if (pGPIOx == GPIOD)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <GPIO_PeriClkCtrl+0x84>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d105      	bne.n	80008ac <GPIO_PeriClkCtrl+0x68>
            GPIOD_PCLK_EN();
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <GPIO_PeriClkCtrl+0x78>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	4a05      	ldr	r2, [pc, #20]	; (80008bc <GPIO_PeriClkCtrl+0x78>)
 80008a6:	f043 0308 	orr.w	r3, r3, #8
 80008aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020400 	.word	0x40020400
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020c00 	.word	0x40020c00

080008cc <__libc_init_array>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	4d0d      	ldr	r5, [pc, #52]	; (8000904 <__libc_init_array+0x38>)
 80008d0:	4c0d      	ldr	r4, [pc, #52]	; (8000908 <__libc_init_array+0x3c>)
 80008d2:	1b64      	subs	r4, r4, r5
 80008d4:	10a4      	asrs	r4, r4, #2
 80008d6:	2600      	movs	r6, #0
 80008d8:	42a6      	cmp	r6, r4
 80008da:	d109      	bne.n	80008f0 <__libc_init_array+0x24>
 80008dc:	4d0b      	ldr	r5, [pc, #44]	; (800090c <__libc_init_array+0x40>)
 80008de:	4c0c      	ldr	r4, [pc, #48]	; (8000910 <__libc_init_array+0x44>)
 80008e0:	f000 f818 	bl	8000914 <_init>
 80008e4:	1b64      	subs	r4, r4, r5
 80008e6:	10a4      	asrs	r4, r4, #2
 80008e8:	2600      	movs	r6, #0
 80008ea:	42a6      	cmp	r6, r4
 80008ec:	d105      	bne.n	80008fa <__libc_init_array+0x2e>
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f4:	4798      	blx	r3
 80008f6:	3601      	adds	r6, #1
 80008f8:	e7ee      	b.n	80008d8 <__libc_init_array+0xc>
 80008fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fe:	4798      	blx	r3
 8000900:	3601      	adds	r6, #1
 8000902:	e7f2      	b.n	80008ea <__libc_init_array+0x1e>
 8000904:	0800093c 	.word	0x0800093c
 8000908:	0800093c 	.word	0x0800093c
 800090c:	0800093c 	.word	0x0800093c
 8000910:	08000940 	.word	0x08000940

08000914 <_init>:
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000916:	bf00      	nop
 8000918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091a:	bc08      	pop	{r3}
 800091c:	469e      	mov	lr, r3
 800091e:	4770      	bx	lr

08000920 <_fini>:
 8000920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000922:	bf00      	nop
 8000924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000926:	bc08      	pop	{r3}
 8000928:	469e      	mov	lr, r3
 800092a:	4770      	bx	lr
